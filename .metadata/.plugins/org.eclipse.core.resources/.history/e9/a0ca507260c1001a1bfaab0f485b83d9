package vlxd.mapper;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import vlxd.dto.ProductDTO;
import vlxd.dto.VendorDTO;

public class ProductMapper extends DBMapper {

	public ProductMapper() throws Exception {
		super(); // call constructor DBMapper -- get connection
	}

	public void createProduct(ProductDTO newProduct) {
		try {
			String sqlStr = "INSERT into product (name,price,unit,category_id) VALUE (?,?,?,?)";

			PreparedStatement preparedStmt = getConnection().prepareStatement(sqlStr);

			preparedStmt.setString(1, newProduct.getName());
			preparedStmt.setString(2, newProduct.getPrice());
			preparedStmt.setString(3, newProduct.getUnit());
			preparedStmt.setInt(4, newProduct.getCategory_id());

			preparedStmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ArrayList<ProductDTO> listProduct() {
		ArrayList<ProductDTO> products = new ArrayList<>();
		try {
			Statement stmt = getConnection().createStatement();
			String sqlStr = "SELECT * FROM product";
			ResultSet rs = stmt.executeQuery(sqlStr); // Send the query to the server
			while (rs != null && rs.next()) {
				ProductDTO product = new ProductDTO();
				product.setId(rs.getInt("id"));
				product.setName(rs.getString("name"));
				product.setPrice(rs.getString("price"));
				product.setUnit(rs.getString("unit"));
				product.setCategory_id(rs.getInt("category_id"));

				products.add(product);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return products;
	}

	public ArrayList<ProductDTO> searchProduct(String searchParameter) {
		ArrayList<ProductDTO> products = new ArrayList<>();
		try {
			Statement stmt = getConnection().createStatement();
			String sqlStr = "SELECT * FROM product " 
					+ "WHERE id LIKE '%" + searchParameter + "%' " 
					+ "OR name LIKE '%" + searchParameter + "%' ";
			ResultSet rs = stmt.executeQuery(sqlStr); // Send the query to the server
			while (rs != null && rs.next()) {
				VendorDTO vendor = new VendorDTO();
				vendor.setId(rs.getInt("id"));
				vendor.setName(rs.getString("name"));
				vendor.setAddress(rs.getString("address"));
				vendor.setPhone(rs.getString("phone"));
				vendor.setEmail(rs.getString("email"));
				vendor.setDebt(rs.getString("debt"));
				vendor.setCreated_at(rs.getTimestamp("created_at"));
				vendor.setUpdated_at(rs.getTimestamp("updated_at"));

				vendors.add(vendor);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return vendors;
	}

	public void editVendor(VendorDTO vendor) {
		try {
			String sqlStr = "UPDATE vendor SET name=?, address=?, phone=?, email=?, updated_at=? WHERE id=?";
			PreparedStatement preparedStmt = getConnection().prepareStatement(sqlStr);

			preparedStmt.setString(1, vendor.getName());
			preparedStmt.setString(2, vendor.getAddress());
			preparedStmt.setString(3, vendor.getPhone());
			preparedStmt.setString(4, vendor.getEmail());
			preparedStmt.setTimestamp(5, vendor.getUpdated_at());
			preparedStmt.setInt(6, vendor.getId());

			preparedStmt.executeUpdate();

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void deleteVendor(VendorDTO vendor) {
		try {
			String sqlStr = "DELETE FROM vendor WHERE id=?";
			PreparedStatement preparedStmt = getConnection().prepareStatement(sqlStr);
			preparedStmt.setInt(1, vendor.getId());

			preparedStmt.executeUpdate();

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}
